{"version":3,"sources":["components/tile.js","components/Board.js","components/game.js","App.js","serviceWorker.js","index.js"],"names":["Tile","count","randomize","Math","random","arguments","length","moves","contact","TileToMatchCount","this","down","location","Board","newTile","randomFloat","boardMap","result","x","y","i","push","drawBoard","tiles","placeTile","tile","filterNumberedTiles","row","filter","checkMatches","array","undefined","makeVerticalRows","arr","mockArr","forEach","index","moveTileRow","filtered","blankTile","mockRow","reverse","moveTileRight","moveTileLeft","moveTileDown","workingArr","moveTileUp","reversed","Game","game","loss","victory","board","newestTile","getTileList","list","filterTiles","checkMoveRight","rightMove","checkMoveLeft","leftMove","checkMoveDown","checkMoveUp","tileHasMove","hasMove","anyTileHasMove","j","hasLost","console","log","checkWin","newGame","props","state","String","findTileStyle","className","setClassNames","React","Component","GameBox","handleKeyPress","key","up","left","right","modal","document","querySelector","classList","remove","setState","gameOver","test","bind","tileArr","that","total","firstArr","secondArr","legalMove","first","second","moveWasLegal","updateBoard","window","addEventListener","e","handleEvents","add","onClick","closeModal","totalCount","App","Boolean","hostname","match","ReactDOM","render","getElementById","process","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.38af4c82.chunk.js","sourcesContent":["\nfunction Tile (count) {\n    function randomize() {\n        let result = 0;\n        let randomFloat = Math.random();\n\n        if (randomFloat > 0.5) {\n            result = 4;\n        } else {\n            result = 2;\n        }\n        return result;\n    }\n    let theCount = 0;\n    \n    if (arguments.length > 0) {\n        theCount = count;\n    } else {\n        theCount = randomize();\n    }\n\n    return {\n        count: theCount,\n        // location: [0, 0],\n        moves: [],\n        contact: function (TileToMatchCount) {\n            if (TileToMatchCount === this.count) {\n                this.count += TileToMatchCount;\n            } else {\n                return;\n            }\n        },\n        down: function () {\n            this.location = [3, 0];\n        }\n    }\n}\n\n\n\n\nexport default Tile ","import Tile from './tile.js'\n\nfunction Board () {\n    let newTile = () => Tile(0);\n    function random () {\n        let randomFloat = Math.random();\n        let result = 0;\n\n        if (randomFloat < 0.25) {\n            result = 0;\n        } else if (randomFloat < 0.5) {\n            result = 1;\n        } else if (randomFloat < 0.75) {\n            result = 2;\n        } else {\n            result = 3;\n        }\n        return result;\n    }\n    function drawBoard () {\n        let result = []\n        let x = random();\n        let y = random();\n        let xArr = () => [newTile(), newTile(), newTile(), newTile()];\n        for (let i = 0; i < 4; i++) {\n            result.push(xArr());\n        }\n        result[x][y] = Tile();\n        return result;\n    }\nreturn {\n    boardMap: drawBoard(),\n    tiles: [],\n    placeTile: function (y, x, tile) {\n        this.boardMap[y][x] = tile;\n    },\n    filterNumberedTiles: function (row) {\n        return row.filter(tile => tile.count > 0);\n    },\n    checkMatches: function (array) {\n        for (let i = 0; i < array.length; i++) {\n            if (array[i + 1] === undefined) {\n                array = this.filterNumberedTiles(array);\n                return array;\n            } else if (array[i].count === array[i + 1].count) {\n                array[i].count += array[i + 1].count;\n                array[i + 1].count = 0; \n                i++\n            }\n        }\n        array = this.filterNumberedTiles(array);\n        return array;\n    },\n    makeVerticalRows: function (arr) {\n        let mockArr = [[], [], [], []];\n        arr.forEach(function(array) {\n            array.forEach(function(tile, index) {\n                mockArr[index].push(tile);\n            });\n        });\n        return mockArr;\n    },\n    moveTileRow: function (row) {\n        let filtered = this.filterNumberedTiles(row);\n        let blankTile = () => Tile(0);\n        let mockRow = [blankTile(), blankTile(), blankTile(), blankTile()];\n        \n        if (filtered.length === 0) {\n            return row;\n        } else if (filtered.length === 1) {\n            mockRow[3] = filtered[0];\n            row = mockRow;\n            return row;\n        } else if (filtered.length > 1) {\n            filtered.reverse();\n            filtered = this.checkMatches(filtered);\n                while (filtered.length < 4) {\n                    filtered.push(blankTile());\n                }\n            }\n        filtered.reverse();\n        row = filtered;\n        return row;\n    },\n    moveTileRight() {\n        for (let i = 0; i < this.boardMap.length; i++) {\n            this.boardMap[i] = this.moveTileRow(this.boardMap[i]);\n        }\n    },\n    moveTileLeft: function () {\n        for (let i = 0; i < this.boardMap.length; i++) {\n            this.boardMap[i] = this.moveTileRow(this.boardMap[i].reverse());\n            this.boardMap[i].reverse();\n        }\n    },\n    moveTileDown: function () {\n        let workingArr = this.makeVerticalRows(this.boardMap);\n        for (let i = 0; i < workingArr.length; i++) {\n            workingArr[i] = this.moveTileRow(workingArr[i]);\n        }\n        this.boardMap = this.makeVerticalRows(workingArr)\n    },\n    moveTileUp: function () {\n        let workingArr = this.makeVerticalRows(this.boardMap);\n        for (let i = 0; i < workingArr.length; i++) {\n            let reversed = workingArr[i].reverse();\n            workingArr[i] = this.moveTileRow(reversed);\n            workingArr[i].reverse();\n        }\n        this.boardMap = this.makeVerticalRows(workingArr);\n        return this.boardMap;\n    },\n}\n\n}\n\nexport default Board ","import Board from './Board.js'\nimport Tile from './tile.js'\n\nfunction Game () {\n    return {\n        loss: false,\n        victory: false,\n        board: Board(),\n        newestTile: [],\n        random: function () {\n            let randomFloat = Math.random();\n            let result = 0;\n    \n            if (randomFloat < 0.25) {\n                result = 0;\n            } else if (randomFloat < 0.5) {\n                result = 1;\n            } else if (randomFloat < 0.75) {\n                result = 2;\n            } else {\n                result = 3;\n            }\n            return result;\n        },\n        getTileList: function () {\n            let list = []\n            this.board.boardMap.forEach((arr) => {\n                arr.forEach((tile) => {\n                    list.push(tile);\n                })\n            })\n            return list; \n        },\n        placeTile: function () {\n            let x = this.random();\n            let y = this.random();\n            let tiles = this.filterTiles()\n            if (tiles.length === 16) {\n                return;\n            } else if (this.board.boardMap[x][y].count < 2) {\n                this.board.placeTile(x, y, Tile());\n            } else {\n                this.placeTile();\n            }\n            this.newestTile[0] = x;\n            this.newestTile[1] = y;\n        },\n\n        /* move checks for final tile at end game */\n        checkMoveRight: function (count, x, y) {\n            let rightMove = this.board.boardMap[x][y + 1];\n            if (rightMove === undefined) {\n                return false;\n            } else if (rightMove.count === count) {\n                return true;\n            } else {\n                return false;\n            }\n        },\n        checkMoveLeft: function(count, x, y) {\n            let leftMove = this.board.boardMap[x][y - 1];\n            if (leftMove === undefined) {\n                return false;\n            } else if (leftMove.count === count) {\n                return true;\n            } else {\n                return false;\n            }\n        },\n        checkMoveDown: function(count, x, y) {\n            if (x === 0) {\n                return false;\n            } else {\n                let downMove = this.board.boardMap[x - 1][y];\n                if (downMove.count === count) {\n                    return true\n                } else {return false} \n            }\n        },\n        checkMoveUp: function(count, x, y) {\n            if (x === 3) {\n                return false;\n            } else {\n                let upMove = this.board.boardMap[x + 1][y];\n                if (upMove.count === count) {\n                    return true\n                } else {\n                return false;\n            }\n        }\n        },\n        tileHasMove: function (x, y) {\n            let hasMove = false;\n            let count = this.board.boardMap[x][y].count;\n            if (this.checkMoveRight(count, x, y) === true) {\n                hasMove = true;\n                return hasMove;\n            } else if (this.checkMoveLeft(count, x, y) === true) {\n                hasMove = true;\n                return hasMove;\n            } else if (this.checkMoveDown(count, x, y) === true) {\n                hasMove = true;\n                return hasMove;\n            } else if (this.checkMoveUp(count, x, y) === true) {\n                hasMove = true;\n                return hasMove;\n            } else {\n                return hasMove;\n            }\n        },\n        anyTileHasMove() {\n            for(let i = 0; i < this.board.boardMap.length; i++) {\n                for(let j = 0; j <this.board.boardMap[i].length; j++) {\n                    let result = this.tileHasMove(i, j);\n                    if (result === true) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        },\n        /* end move checks */\n        filterTiles: function () {\n            let tiles = []\n            this.board.boardMap.forEach((arr) => {\n                arr.forEach((tile) => {\n                    if (tile.count > 0) {\n                        tiles.push(tile);\n                    }\n                });\n            });\n            return tiles;\n        },\n        // Should see if there are no legal moves, returns true if no moves false if there are moves\n        hasLost: function () {\n            let loss = false;\n            let tiles = this.filterTiles();\n            if (tiles.length < 16) {\n                return loss;\n            } else if (this.anyTileHasMove() === true) {\n                // if any tile can move return false;\n                console.log(\" has lost\",  loss)\n                return loss;\n            } else {\n                loss = true;\n                return loss;\n            }\n        }, \n        checkWin: function () {\n            let tiles = this.filterTiles();\n            let winner = tiles.filter(tile => tile.count === 2048)\n            if (winner.length > 0) {\n                return 1;\n            } else {\n                return 0;\n            }\n        },\n        newGame: function () {\n            this.board = Board();\n        }\n}\n}\n\nexport default Game","import React from 'react';\nimport './App.css';\nimport Game from './components/game.js'\n\nconst game = Game()\nlet board = game.board;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameBox game={game} board={board}> </GameBox>\n    </div>\n  );\n}\nclass Tile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: props.count\n    }\n  }\n  findTileStyle () {\n    let count = this.props.count;\n    let result = String;\n\n    switch(count) {\n      case 2:\n      result = \"two\";\n      break;\n      case 4:\n      result = \"four\";\n      break; \n      case 8:\n        result = \"eight\";\n      break;\n      case 16:\n        result = \"sixteen\";\n      break;\n      case 32:\n        result = \"thirtytwo\";\n      break;\n      case 64:\n        result = \"sixtyfour\";\n      break;\n      case 128:\n        result = \"onetwentyeight\";\n      break;\n      case 256:\n        result = \"twofiftysix\";\n      break;\n      case 512:\n        result = \"fivetwelve\";\n      break;\n      case 1024:\n        result = \"tentwofour\";\n      break;\n      case 2048:\n        result = \"twentyfortyeight\";\n      break;\n      default: \n      result = \"zero\"\n      break;\n    }\n    return result;\n  }\n  setClassNames() {\n    let result = \"tile \" + this.findTileStyle();\n    return result;\n  }\n\n  render() {\n    return ( <div className={this.setClassNames()}> {this.props.count} </div>)\n  }\n}\nclass GameBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      game: props.game,\n      board: game.board,\n      test: \"react 2048\",\n      gameOver: \"Lost\",\n    }\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n  drawBoard() {\n    let tileArr = []\n    let tileRows = this.state.game.board.boardMap;\n\n    tileRows.forEach((row, index) => {\n      let that = this\n      let x = index;\n      row.forEach((tile, index) => {\n        let y = index;\n        tileArr.push(<Tile count={that.state.game.board.boardMap[x][y].count}></Tile>);\n      })\n    })\n    return (\n      <div className=\"board\">\n        {tileArr}\n      </div>\n    )\n  }\n  totalCount() {\n    let total = 0;\n    this.props.game.board.boardMap.forEach((arr) => {\n      arr.forEach((tile) => {\n        if (tile.count > 0) {\n          total+= tile.count;\n        }\n      })\n    })\n    return total;\n  }\n  // this works partially but still has problems, might have to write some tests\n  // dammit \n  moveWasLegal(firstArr, secondArr) {\n    let legalMove = false;\n    for (let i = 0; i < firstArr.length; i++) {\n      if (firstArr[i].count !== secondArr[i].count) {\n        legalMove = true;\n        return legalMove;\n      }\n    }\n    return legalMove;\n  }\n  updateBoard() {\n    this.setState(state => ({}));\n  }\n  // these have become redunant with expansion, fix in refactor.\n  up () {\n    let first = this.props.game.getTileList();\n    this.props.game.board.moveTileUp();\n    let second = this.props.game.getTileList();\n    if (this.moveWasLegal(first, second) === false) {\n      this.updateBoard();\n      return;\n    } else {\n    this.props.game.placeTile();\n    this.updateBoard();\n    }\n  }\n  down () {\n    let first = this.props.game.getTileList();\n    this.props.game.board.moveTileDown();\n    let second = this.props.game.getTileList();\n\n    if (this.moveWasLegal(first, second) === false) {\n      this.updateBoard();\n      return;\n    } else {\n    this.props.game.placeTile();\n    this.updateBoard();\n    }\n  }\n  left () {\n    let first = this.props.game.getTileList();\n\n    this.props.game.board.moveTileLeft();\n    \n    let second = this.props.game.getTileList()\n    if (this.moveWasLegal(first, second) === false) {\n      this.updateBoard() \n      return;\n    } else {\n      this.props.game.placeTile();\n      this.updateBoard();\n    }\n  }\n  right () {\n    let first = this.props.game.getTileList();\n    this.props.game.board.moveTileRight();\n    let second = this.props.game.getTileList();\n    if (this.moveWasLegal(first, second) === false) {\n      this.updateBoard();\n      return;\n    } else {\n      this.props.game.placeTile();\n      this.updateBoard();\n    }\n  }\n  handleKeyPress = (key) => {\n    if (key === \"ArrowUp\") {\n      this.up();\n    } else if (key === \"ArrowDown\") {\n      this.down();\n    } else if (key === \"ArrowLeft\") {\n      this.left();\n    } else if (key === \"ArrowRight\") {\n      this.right();\n    } \n    let modal = document.querySelector(\".myModal\");\n    if (this.props.game.hasLost() === true) {\n      modal.classList.remove(\"invisible\")\n      this.setState({gameOver: \"Lost\"});\n      return; }\n    let victory = this.props.game.checkWin();\n    if (victory === 1) {\n      modal.classList.remove(\"invisible\");\n      this.setState({gameOver: \"Won!\"})\n    }\n    return;\n  }\n  handleEvents() {\n    window.addEventListener('keydown' , (e) => this.handleKeyPress(e.key));\n  }\n  newGame() {\n    this.props.game.newGame();\n    this.updateBoard();\n  }\n  componentDidMount() {\n    this.handleEvents();\n  }\n  closeModal() {\n    this.newGame();\n    let modal = document.querySelector(\".myModal\")\n    modal.classList.add(\"invisible\");\n  }\n  render() {\n    return (\n    <div className=\"gamebox\">\n      <div className=\"myModal invisible\">\n       <div className=\"endGame\"> \n       <h1> Game Over! </h1>\n       <h3> You {this.state.gameOver} </h3> \n        <button onClick={() => this.closeModal()}> New Game </button>\n        </div>\n         </div>\n      <div className=\"header\">\n        <div className=\"game-title\">  2048 </div>\n        <div> <button onClick={() => this.newGame()}> New Game  </button></div>\n        <div className=\"score\"> {this.totalCount()}</div>\n      </div>\n      \n       <div>\n       {this.drawBoard()}\n       </div>\n       <div> \n       </div>\n    </div>\n  \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nconsole.log(\"This is the process.env\", process.env.PUBLIC_URL)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}